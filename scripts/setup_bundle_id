#!/bin/bash
set -e
set -u
set -o pipefail

### This script sets up the bundle identifier for the Xcode project using selected TEAM_ID.

TEAM_ID_FILE="$(dirname "${BASH_SOURCE[0]}")/../Configurations/OpenSourceDebug.xcconfig"

DEFAULT_TEAM_ID="AKK7J2GV64"

# Add default contents first
if [ -f "$TEAM_ID_FILE" ]; then
    rm "$TEAM_ID_FILE"
fi
echo "// This file was automatically generated, do not edit directly." > "$TEAM_ID_FILE"
echo "" >> "$TEAM_ID_FILE"
echo "DEVELOPMENT_TEAM=$DEFAULT_TEAM_ID" >> "$TEAM_ID_FILE"
echo "" >> "$TEAM_ID_FILE"
echo "SIGNING_DISAMBIGUATOR=" >> "$TEAM_ID_FILE"


TEAM_INFO_RESULT=""

function get_team_info_array() {
    local XCODEPREFS="$HOME/Library/Preferences/com.apple.dt.Xcode.plist"
    local team_info    
    
    # Get all team infos and format as key-value pairs
    local all_keys=($(/usr/libexec/PlistBuddy -c "Print :IDEProvisioningTeamByIdentifier" "$XCODEPREFS" | grep ' = Array' | awk '{print $1}'))
    local result=""
    for key in "${all_keys[@]}"; do
        local teamID=$(/usr/libexec/PlistBuddy -c "Print :IDEProvisioningTeamByIdentifier:$key:0:teamID" "$XCODEPREFS" 2>/dev/null)
        local teamName=$(/usr/libexec/PlistBuddy -c "Print :IDEProvisioningTeamByIdentifier:$key:0:teamName" "$XCODEPREFS" 2>/dev/null)
        if [ -n "$teamID" ]; then
            result+="Team: $teamID\n    Name: $teamName\n"
        fi
    done
    if [ -n "$result" ]; then
        TEAM_INFO_RESULT="$result"
        return 0
    fi
    
    # Fallback to old method: IDEProvisioningTeams
    local found=false
    TEAM_KEYS=(`/usr/libexec/PlistBuddy -c "Print :IDEProvisioningTeams" "$XCODEPREFS" | perl -lne 'print $1 if /^    (\S*) =/'`)
    for KEY in ${TEAM_KEYS[@]}; do
        i=0
        while true ; do
            TEAMID=$(/usr/libexec/PlistBuddy -c "Print :IDEProvisioningTeams:$KEY:$i:teamID" "$XCODEPREFS" 2>/dev/null)
            if [ $? -ne 0 ]; then
                break
            fi
            if [ "$TEAMID" = "$identifier" ]; then
                NAME=$(/usr/libexec/PlistBuddy -c "Print :IDEProvisioningTeams:$KEY:$i:teamName" "$XCODEPREFS" 2>/dev/null)
                TEAM_INFO_RESULT="Team: $TEAMID\n    Name: $NAME"
                export TEAM_INFO_RESULT
                found=true
            fi
            i=$(($i + 1))
        done
    done
    if [ "$found" = false ]; then
        TEAM_INFO_RESULT=""
        return 1
    fi
}

get_team_info_array
if echo "$TEAM_INFO_RESULT" | grep -q "$DEFAULT_TEAM_ID"; then
    # "You already have access to the AKK7J2GV64 team. No changes needed. Exiting."
    exit 0
fi

echo ""
echo "You do not have access to the $DEFAULT_TEAM_ID team. Would you like to change the bundle identifier to use your own Team ID so you can build and run on a physical device? [y/N]"
read -r CHANGE_BUNDLE_ID
CHANGE_BUNDLE_ID=${CHANGE_BUNDLE_ID:-N}

if [[ "$CHANGE_BUNDLE_ID" =~ ^[Nn]$ ]]; then
    exit 0
fi

if [ -z "$1" ]; then
    # Show team IDs to user for selection
    # Reuse print_team_ids to get all team IDs and info
    printf "%b" "$TEAM_INFO_RESULT"
    echo ""
    echo "> Please enter your Apple Developer Team ID (e.g. 1A23BDCD):"
    read TEAM_ID
else
    TEAM_ID=$1
fi

if [ -z "$TEAM_ID" ]; then
    echo "You must enter a team id"
    exit 1
fi

echo "Setting team ID to $TEAM_ID"

if [ -f "$TEAM_ID_FILE" ]; then
    rm "$TEAM_ID_FILE"
fi
echo "// This file was automatically generated, do not edit directly." > "$TEAM_ID_FILE"
echo "" >> "$TEAM_ID_FILE"
echo "DEVELOPMENT_TEAM=$DEFAULT_TEAM_ID" >> "$TEAM_ID_FILE"
echo "" >> "$TEAM_ID_FILE"
echo "SIGNING_DISAMBIGUATOR=" >> "$TEAM_ID_FILE"

echo ""
echo "Successfully generated configuration at $TEAM_ID_FILE, you may now build the app using the \"Wikipedia\" target"
echo "You may need to close and re-open the project in Xcode if it's already open"
echo ""
